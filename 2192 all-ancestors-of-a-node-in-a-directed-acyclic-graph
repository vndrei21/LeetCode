class Solution {
       
      public List<List<Integer>> getAncestors(int n, int[][] edges) {

    List<List<Integer>> rez = new ArrayList<>();
    Map<Integer,List<Integer>> graph = new HashMap<>();
    for(int i = 0; i < n; i++) {
        rez.add(new ArrayList<>());
        graph.put(i,new ArrayList<>());
    }

    for(var edge:edges)
    {
        graph.get(edge[0]).add(edge[1]);
    }
    for(int i=0;i<n;i++)
        dfs(graph,i,i,rez,new boolean[n]);
    return rez;
}

    public void dfs(Map<Integer,List<Integer>> graph,Integer parent,Integer curr,List<List<Integer>>res,boolean[]visit)
    {
        visit[curr] = true;
        for(int i = 0; i<graph.get(curr).size();i++)
        {
            int dest = graph.get(curr).get(i);
            if(!visit[dest])
            {
                res.get(dest).add(parent);
                dfs(graph,parent,dest,res,visit);
            }
        }
    }
}
